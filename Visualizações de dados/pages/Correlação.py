import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Correla√ß√£o",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo da p√°gina
st.write('Correla√ß√£o')

# Carrega o arquivo CSV
df = pd.read_csv(r'dados//CancerDataBase_Final_2.csv')

# Container para sele√ß√£o de regi√µes
with st.sidebar:
    # Container para regi√µes
    container1 = st.container(height=100)
    all1 = st.checkbox("Selecione todas regi√µes", value=True)

    if all1:
        selected_options1 = container1.multiselect("Selecione uma ou mais regi√µes:", df["Region"].unique(), df["Region"].unique())
    else:
        selected_options1 = container1.multiselect("Selecione uma ou mais regi√µes:", df["Region"].unique())

    # Container para anos
    container2 = st.container(height=100)
    all2 = st.checkbox("Selecione todos anos", value=True)

    if all2:
        selected_options2 = container2.multiselect("Selecione um ou varios anos:", df["Year"].unique(), df["Year"].unique())
    else:
        selected_options2 = container2.multiselect("Selecione um ou varios anos:", df["Year"].unique())

    # Container para tipos de cancer
    container3 = st.container(height=100)
    all3 = st.checkbox("Selecione todos os tipos", value=True)

    if all3:
        selected_options3 = container3.multiselect("Selecione um ou mais tipos de cancer:", df["Types"].unique(), df["Types"].unique())
    else:
        selected_options3 = container3.multiselect("Selecione um ou mais tipos de cancer:", df["Types"].unique())

# Filtro dos dados
filtered_df = df[
    (df["Region"].isin(selected_options1)) &
    (df["Year"].isin(selected_options2)) &
    (df["Types"].isin(selected_options3))
]

# Sele√ß√£o de colunas para an√°lise de correla√ß√£o
num_cols = ['GDP per capita (current US$)', 'Current health expenditure per capita (current US$)', 'Deaths']
corr_df = filtered_df[num_cols]

# Gr√°fico de dispers√£o para regi√µes
region_data = filtered_df.groupby('Region')[['GDP per capita (current US$)', 'Current health expenditure per capita (current US$)', 'Deaths']].mean().reset_index()
fig1 = px.scatter(region_data, x='GDP per capita (current US$)', y='Current health expenditure per capita (current US$)', color='Region', hover_name='Region', size='Deaths', title='Rela√ß√£o entre PIB per Capita, Investimento em Sa√∫de per Capita e Mortes por Regi√£o')
st.plotly_chart(fig1, use_container_width=True)

# Explica√ß√£o do gr√°fico
with st.expander("Explica√ß√£o"):
    st.write(
        """
        ## An√°lise de Correla√ß√£o entre PIB per Capita, Gastos com Sa√∫de per Capita e √ìbitos por Regi√£o
        
        ### Correla√ß√£o entre PIB per Capita e Gastos com Sa√∫de per Capita
        Existem fortes correla√ß√µes positivas entre o PIB per capita e os gastos com sa√∫de per capita por regi√£o. Regi√µes com maior PIB per capita, como Europa e Am√©ricas, tamb√©m apresentam maiores gastos com sa√∫de per capita. Isso sugere que o crescimento econ√¥mico pode estar relacionado ao aumento nos gastos com sa√∫de.

        ### Correla√ß√£o entre Gastos com Sa√∫de per Capita e N√∫mero de √ìbitos
        H√° uma correla√ß√£o positiva entre os gastos com sa√∫de per capita e o n√∫mero de √≥bitos por regi√£o. Regi√µes com maiores gastos com sa√∫de, como Europa e Am√©ricas, registram um maior n√∫mero de √≥bitos. Isso pode indicar que regi√µes com melhores sistemas de sa√∫de e maior acesso a cuidados m√©dicos tendem a registrar mais √≥bitos, possivelmente por terem melhores sistemas de coleta de dados.
        """
    )

# Gr√°fico de dispers√£o para pa√≠ses
entity_data = filtered_df.groupby('Entity')[['GDP per capita (current US$)', 'Current health expenditure per capita (current US$)', 'Deaths', 'lat', 'lon']].mean().reset_index()
fig2 = px.scatter(entity_data, x='GDP per capita (current US$)', y='Current health expenditure per capita (current US$)', color='Entity', hover_name='Entity', size='Deaths', title='Rela√ß√£o entre PIB per Capita, Investimento em Sa√∫de per Capita e Mortes por Pa√≠s')
st.plotly_chart(fig2, use_container_width=True)

# Gr√°fico de dispers√£o para pa√≠ses (segunda forma)
fig3 = px.scatter(filtered_df.groupby("Entity").agg({"GDP per capita (current US$)": "mean", "Current health expenditure per capita (current US$)": "mean"}).reset_index(), x="GDP per capita (current US$)", y="Current health expenditure per capita (current US$)", color="Entity", title='Rela√ß√£o entre PIB per Capita, Investimento em Sa√∫de per Capita e Mortes por Pa√≠s - (Segunda forma para melhor visualiza√ß√£o dos pa√≠ses)')
st.plotly_chart(fig3)

# Explica√ß√£o do gr√°fico
with st.expander("Explica√ß√£o"):
    st.write(
        """
        ## An√°lise da Correla√ß√£o entre PIB per Capita, Investimento em Sa√∫de per Capita e Mortes por Pa√≠s

        ### Correla√ß√£o entre PIB per Capita e Investimento em Sa√∫de per Capita
        **Existe uma correla√ß√£o positiva entre PIB per capita e investimento em sa√∫de per capita**. Pa√≠ses com maior PIB per capita tendem a investir mais em sa√∫de per capita. Por exemplo, Noruega, Su√≠√ßa e Luxemburgo est√£o entre os pa√≠ses com maior PIB per capita e tamb√©m com maior investimento em sa√∫de per capita.

        ### Correla√ß√£o entre PIB per Capita e Mortes
        **Pa√≠ses com maior PIB per capita e investimento em sa√∫de per capita tendem a ter menor n√∫mero de mortes**. Pa√≠ses como Isl√¢ndia, Jap√£o e Su√≠√ßa t√™m alto PIB per capita, alto investimento em sa√∫de per capita e baixo n√∫mero de mortes.

        ### Exce√ß√µes
        **Alguns pa√≠ses fogem a essa tend√™ncia geral**. Por exemplo, Estados Unidos tem alto PIB per capita e investimento em sa√∫de per capita, mas n√∫mero de mortes relativamente alto em compara√ß√£o a outros pa√≠ses desenvolvidos.

        ### Conclus√£o
        Em resumo, **embora n√£o haja uma correla√ß√£o perfeita**, os dados sugerem que **pa√≠ses com maior riqueza e investimento em sa√∫de tendem a ter melhores indicadores de sa√∫de, com menor n√∫mero de mortes**. No entanto, fatores como distribui√ß√£o de renda, efici√™ncia dos gastos em sa√∫de e densidade habitacional tamb√©m desempenham um papel importante.
        """
    )


# corr_matrix √© a sua matriz de correla√ß√£o
corr_matrix = corr_df.corr()

# Cria uma m√°scara para o tri√¢ngulo superior
mask = np.triu(np.ones_like(corr_matrix, dtype=bool))

# Converte a m√°scara em um array de valores booleanos
mask = mask.tolist()

# Inverte os valores da m√°scara
mask = [[not cell for cell in row] for row in mask]

# Cria um texto de exibi√ß√£o ao passar o mouse sobre o heatmap
hovertext = [[f'x: {x}<br>y: {y}<br>z: {z}' for x, y, z in zip(corr_matrix.columns, corr_matrix.index, row)] for row in corr_matrix.values]

# Cria o heatmap
fig = go.Figure(data=go.Heatmap(
    z=corr_matrix,
    x=corr_matrix.columns,
    y=corr_matrix.columns,
    xgap=1, ygap=1,
    colorscale='Reds',
    zmin=0, zmax=1,
    hovertext=hovertext,
    hoverinfo='text',
    showscale=True,
    visible=True
))

# Aplica a m√°scara ao heatmap e remove as c√©lulas onde a correla√ß√£o √© 1
for i in range(len(mask)):
    for j in range(len(mask[i])):
        if mask[i][j] or corr_matrix.iloc[i, j] == 1:
            fig.data[0]['z'][i][j] = None

# Adiciona anota√ß√µes de texto
for i in range(len(corr_matrix.columns)):
    for j in range(len(corr_matrix.columns)):
        if not mask[i][j] and corr_matrix.iloc[i, j] != 1:
            fig.add_annotation(
                x=corr_matrix.columns[j],
                y=corr_matrix.columns[i],
                text=str(round(corr_matrix.iloc[i, j], 2)),
                showarrow=False,
                font=dict(
                    color="black",
                    size=12
                )
            )

# Configura o layout do gr√°fico
fig.update_layout(
    title_text='Matriz de Correla√ß√£o',
    title_x=0.5,
    autosize=False,
    margin=dict(t=60, b=60, l=60, r=60),
    paper_bgcolor="rgba(0,0,0,0)",
    plot_bgcolor="rgba(0,0,0,0)",
    xaxis_showgrid=False,
    yaxis_showgrid=False,
    xaxis_zeroline=False,
    yaxis_zeroline=False,
)

# Exibe o gr√°fico
st.plotly_chart(fig)